What's this, another useless project?

	That's right.


What's this one about?

	Networking. I needed a class project. So I'll use the same trick
	I always use: let's do something dumb by tricking programs via
	LD_PRELOAD.

	So, like, apps on my phone do a bad job of switching over to WiFi.
	Instead, what if I had a library that I could shove into a process
	which would allow it to reconnect to a server when it gets a signal?
	That'd be pretty cool.


Does it work?

	Well, kinda. It's more a proof of concept. There's a lot of hacks
	involving pthreads and signals that are Bad Ideas, along with a pretty
	severe limitation in that the server can't fork... Really, I've only
	tested it with netcat. But I expect that with some extra (read: a lot
	more) work, it could actually work on ssh. But it would be very
	insecure.


What's the point?

	Like I said, I needed a class project for networking. But hey, this is
	kinda fun! I'm pretty fond of the "close and dup a new TCP socket
	out from under the main thread before it notices anything change".
	It kinda feels like the golden idol at the start of the first Indiana
	Jones movie.


How does it work?

	Both the server and the client have their networking functions
	interposed. They create a session when a TCP connection is established.
	When the client wishes to reconnect (without having disconnected, maybe
	it moved to a different network or something), it connects to a special
	port on the server (9001), and negotiates that the session should do a
	reconnect. If this is accepted, the server will the ACK, and replace
	the old connection's file descriptor with this new one. There is a
	thread running to handle connections to that port on the server, and it
	replaces the appropriate file descriptor before the main thread can
	figure out what's going on (it suspends the thread to do this).
	The client does a similar thing (but it's actually easier since it
	already in a signal handler).

Future plans?

	None, it's a class project.

	Okay, it could be improved. It would require a fair amount of reworking
	to make it actually secure and to make it work better (support forking
	servers, multithreaded, session control, etc...). But I don't have time
	:)


